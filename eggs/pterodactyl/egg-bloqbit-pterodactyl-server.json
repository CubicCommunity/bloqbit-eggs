{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-08-28T09:41:42+08:00",
    "name": "Bloqbit Pterodactyl Server",
    "author": "bloqbit@cubicstudios.xyz",
    "description": "Need it? Got it. This is the official Node.js Pterodactyl egg to install and run Bloqbit.",
    "features": null,
    "docker_images": {
        "Node.js 21": "ghcr.io\/parkervcp\/yolks:nodejs_21",
        "Node.js 22": "ghcr.io\/parkervcp\/yolks:nodejs_22",
        "Node.js 23": "ghcr.io\/parkervcp\/yolks:nodejs_23",
        "Node.js 24": "ghcr.io\/parkervcp\/yolks:nodejs_24"
    },
    "file_denylist": [],
    "startup": "if [[ -d .git ]] && [[ ${AUTO_UPDATE} == \"1\" ]]; then git pull; fi;\r\nif [ -f \/home\/container\/package.json ]; then \/usr\/local\/bin\/npm install; fi;\r\n\/usr\/local\/bin\/npm start;",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": [\r\n        \" is online\",\r\n        \" is ready\",\r\n        \" is running\"\r\n    ]\r\n}",
        "logs": "{}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# Bloqbit Installation Script\r\n# Server Files: \/mnt\/server\r\n\r\n# Derived from node.js generic egg https:\/\/www.pterodactyleggs.com\/egg\/673601c24924a4e9bbd4bed3\/\r\n\r\n# Constants\r\nGIT_ADDRESS=\"https:\/\/github.com\/CubicCommunity\/Bloqbit.git\"\r\nSERVER_DIR=\"\/mnt\/server\"\r\n\r\n# Update and install required dependencies\r\ninstall_dependencies() {\r\n    echo \"Cleaning packages...\"\r\n\r\n    apt-get autoremove -y && apt-get clean && apt-get autoclean\r\n\r\n    echo \"Updating system and installing dependencies...\"\r\n\r\n    apt update && apt install -y git\r\n\r\n    if ! command -v git &>\/dev\/null; then\r\n        echo \"git could not be installed or is not in PATH.\"\r\n        exit 1\r\n    fi\r\n}\r\n\r\n# Update npm to the latest version\r\nupdate_npm() {\r\n    echo \"Updating npm to the latest version...\"\r\n    npm i -g npm@latest\r\n}\r\n\r\n# Clone or pull the repository\r\nmanage_repository() {\r\n    echo \"Checking server directory: $SERVER_DIR\"\r\n\r\n    mkdir -p \"$SERVER_DIR\"\r\n    cd \"$SERVER_DIR\" || exit 1\r\n\r\n    # Determine branch or release tag\r\n    if [ \"$USE_RELEASE\" = true ]; then\r\n        echo \"Detecting latest release tag from remote...\"\r\n        BRANCH=$(git ls-remote --tags --sort=-v:refname \"$GIT_ADDRESS\" | \\\r\n                 grep -o 'refs\/tags\/[^\\^]*' | \\\r\n                 sed 's\/refs\\\/tags\\\/\/\/' | \\\r\n                 head -n 1)\r\n\r\n        if [ -z \"$BRANCH\" ]; then\r\n            echo \"No release tags found. Exiting...\"\r\n            exit 11\r\n        fi\r\n\r\n        echo \"Latest release tag detected: $BRANCH\"\r\n    fi\r\n\r\n    if [ \"$(ls -A \"$SERVER_DIR\")\" ]; then\r\n        echo \"$SERVER_DIR is not empty.\"\r\n\r\n        if [ -d .git ]; then\r\n            echo \".git directory exists.\"\r\n\r\n            if [ -f .git\/config ]; then\r\n                echo \"Loading info from git config...\"\r\n                ORIGIN=$(git config --get remote.origin.url)\r\n            else\r\n                echo \"Files found with no git config. Exiting to avoid breaking anything.\"\r\n                exit 10\r\n            fi\r\n        fi\r\n\r\n        if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n            echo \"Forcing latest update from origin (discarding local changes)...\"\r\n            git fetch --all\r\n\r\n            # Detect current branch or tag\r\n            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)\r\n\r\n            if [ \"$BRANCH_NAME\" = \"HEAD\" ]; then\r\n                echo \"Detached HEAD detected. Resetting to latest tag: $BRANCH\"\r\n                git reset --hard \"tags\/${BRANCH}\"\r\n            else\r\n                echo \"Resetting to origin\/${BRANCH_NAME}\"\r\n                git reset --hard \"origin\/${BRANCH_NAME}\"\r\n            fi\r\n        fi\r\n    else\r\n        echo \"$SERVER_DIR is empty. Cloning repository...\"\r\n\r\n        if [ -z \"${BRANCH}\" ]; then\r\n            echo \"Cloning default branch...\"\r\n            git clone \"${GIT_ADDRESS}\" .\r\n        else\r\n            echo \"Cloning branch or tag: ${BRANCH}...\"\r\n            git clone --single-branch --branch \"${BRANCH}\" \"${GIT_ADDRESS}\" .\r\n        fi\r\n    fi\r\n}\r\n\r\n# Install Node.js dependencies\r\ninstall_dependencies_node() {\r\n    if [ -f \"$SERVER_DIR\/package.json\" ]; then\r\n        echo \"Installing Node.js dependencies...\"\r\n        npm install --production\r\n    else\r\n        echo \"No package.json found. Skipping npm install.\"\r\n    fi\r\n}\r\n\r\n# Main script execution\r\nmain() {\r\n    install_dependencies\r\n    update_npm\r\n    manage_repository\r\n    install_dependencies_node\r\n\r\n    echo \"\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\"\r\n    echo \"Bloqbit is now installed!\"\r\n    echo \"\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\u25ac\"\r\n\r\n    exit 0\r\n}\r\n\r\n# Execute the main function\r\nmain\r\n\r\n# End of script",
            "container": "node:24-bookworm-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Stable Release",
            "description": "Run a stable release version snapshot branch of Bloqbit.",
            "env_variable": "USE_RELEASE",
            "default_value": "true",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Always Update",
            "description": "Pull the latest commit from Bloqbit's public repository on startup.",
            "env_variable": "AUTO_UPDATE",
            "default_value": "true",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Repository Branch",
            "description": "The branch of Bloqbit's repository to install from. You can provide a valid release version as long as 'Stable Release' is disabled.",
            "env_variable": "BRANCH",
            "default_value": "public",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Bot Token",
            "description": "Token for the bot of the Discord application you will utilize.",
            "env_variable": "MAIN_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:72",
            "field_type": "text"
        },
        {
            "name": "Run Shards",
            "description": "Create multiple instances of Bloqbit at startup to handle activity across over hundreds of Discord servers. Note that this will use more resources and is not recommended when only running in a small amount of servers.",
            "env_variable": "USE_SHARDS",
            "default_value": "false",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Developer Logging Webhook",
            "description": "URL for the private webhook used to log important bot events.",
            "env_variable": "MAIN_LOG_WH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|url|max:121",
            "field_type": "text"
        },
        {
            "name": "Database Host",
            "description": "Host IP address of the MariaDB database.",
            "env_variable": "DB_HOST",
            "default_value": "0.0.0.0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|ip",
            "field_type": "text"
        },
        {
            "name": "Database Port",
            "description": "Port of the MariaDB database host.",
            "env_variable": "DB_PORT",
            "default_value": "3000",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|integer|min:1|max:65535",
            "field_type": "text"
        },
        {
            "name": "Database Name",
            "description": "Name of the MariaDB database the bot's data will be stored in.",
            "env_variable": "DB_DATABASE",
            "default_value": "bloqbit",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Database User",
            "description": "Username to authorize into the MariaDB database with.",
            "env_variable": "DB_USERNAME",
            "default_value": "admin",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Database Password",
            "description": "Password to authorize into the MariaDB database with.",
            "env_variable": "DB_PASSWORD",
            "default_value": "admin",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Log Level",
            "description": "Choose a log level to display in the console.",
            "env_variable": "LOG_LEVEL",
            "default_value": "Info",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|in:Trace,Debug,Info,Warn,Error,Done,Print",
            "field_type": "text"
        }
    ]
}